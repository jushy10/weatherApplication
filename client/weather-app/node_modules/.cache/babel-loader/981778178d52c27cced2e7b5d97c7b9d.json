{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\src\\\\components\\\\forecastAPI.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState } from 'react';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ForecastAPI = () => {\n  _s();\n\n  const [cityInput, setCityInput] = useState('');\n  const [maxTemp, setMaxTemp] = useState('');\n  const [minTemp, setMinTemp] = useState('');\n  const [avgTemp, setAvgTemp] = useState('');\n  const [condition, setCondition] = useState('');\n  const [conditionIcon, setConditionIcon] = useState('');\n  const [chanceOfRain, setChanceOfRain] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    getAPI(cityInput);\n  };\n\n  const everyChange = e => {\n    setCityInput(e.target.value);\n  };\n\n  const printOut = maxTemp => {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: maxTemp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  };\n\n  const getAPI = cityInput => {\n    const options = {\n      method: 'GET',\n      url: 'http://localhost:3001/forecastAPI',\n      //Backend Pull\n      params: {\n        city: cityInput\n      }\n    };\n    axios.request(options).then(response => {\n      for (let i = 0; i < 3; i++) {\n        console.log(response.data.forecast[i]);\n        setMaxTemp(response.data.forecast[0].day.maxtemp_c);\n        setMinTemp(response.data.forecast[0].day.mintemp_c);\n        setAvgTemp(response.data.forecast[0].day.avgtemp_c);\n        setCondition(response.data.forecast[0].day.condition.text);\n        setConditionIcon(response.data.forecast[0].day.condition.icon);\n        setChanceOfRain(response.data.forecast[0].day.daily_chance_of_rain); // printOut(maxTemp);\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: everyChange,\n        placeholder: \"Enter Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: printOut(maxTemp)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ForecastAPI, \"p0AqIcbK0gugb5HPAeko8AjxVEY=\");\n\n_c = ForecastAPI;\nexport default ForecastAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForecastAPI\");","map":{"version":3,"sources":["C:/Web Development/WeatherApplication/client/weather-app/src/components/forecastAPI.js"],"names":["axios","useState","React","ForecastAPI","cityInput","setCityInput","maxTemp","setMaxTemp","minTemp","setMinTemp","avgTemp","setAvgTemp","condition","setCondition","conditionIcon","setConditionIcon","chanceOfRain","setChanceOfRain","handleSubmit","e","preventDefault","getAPI","everyChange","target","value","printOut","options","method","url","params","city","request","then","response","i","console","log","data","forecast","day","maxtemp_c","mintemp_c","avgtemp_c","text","icon","daily_chance_of_rain","catch","error"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { useState } from 'react';\r\nimport React from 'react';\r\n\r\nconst ForecastAPI = () => {\r\n\r\n    const [cityInput, setCityInput] = useState('');\r\n\r\n    const [maxTemp, setMaxTemp] = useState('');\r\n    \r\n    const [minTemp, setMinTemp] = useState('');\r\n\r\n    const [avgTemp, setAvgTemp] = useState('');\r\n\r\n    const [condition, setCondition] = useState('');\r\n\r\n    const [conditionIcon, setConditionIcon] = useState('');\r\n\r\n    const [chanceOfRain, setChanceOfRain] = useState('');\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        getAPI(cityInput);\r\n    }\r\n\r\n    const everyChange = (e) => {\r\n\r\n        setCityInput(e.target.value)\r\n    }\r\n\r\n\r\n    const printOut = (maxTemp) => {\r\n        return (\r\n            <h1>{maxTemp}</h1>\r\n        );\r\n\r\n    }\r\n\r\n    const getAPI = (cityInput) => {\r\n        const options = {\r\n            method: 'GET',\r\n            url: 'http://localhost:3001/forecastAPI', //Backend Pull\r\n            params: { city: cityInput },\r\n        }\r\n\r\n        axios.request(options).then((response) => {\r\n            for (let i = 0; i < 3; i++) {\r\n                console.log(response.data.forecast[i]);\r\n\r\n                setMaxTemp(response.data.forecast[0].day.maxtemp_c)\r\n                setMinTemp(response.data.forecast[0].day.mintemp_c)\r\n                setAvgTemp(response.data.forecast[0].day.avgtemp_c)\r\n                setCondition(response.data.forecast[0].day.condition.text)\r\n                setConditionIcon(response.data.forecast[0].day.condition.icon)\r\n                setChanceOfRain(response.data.forecast[0].day.daily_chance_of_rain)\r\n\r\n                // printOut(maxTemp);\r\n\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n        }).catch((error) => {\r\n            console.error(error)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={handleSubmit}>\r\n            <input onChange={everyChange} placeholder=\"Enter Location\"></input>\r\n        </form>\r\n        <div>\r\n            {printOut(maxTemp)}\r\n        </div>\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default ForecastAPI;\r\n"]},"metadata":{},"sourceType":"module"}