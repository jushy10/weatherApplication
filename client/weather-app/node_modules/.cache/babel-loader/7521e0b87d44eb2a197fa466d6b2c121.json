{"ast":null,"code":"var _jsxFileName = \"D:\\\\School\\\\3230\\\\weatherApplication\\\\client\\\\weather-app\\\\src\\\\components\\\\HourlyForecast.jsx\";\nimport React, { Component } from \"react\";\nimport { Chart as ChartJS } from 'chart.js/auto';\nimport { Chart, Line } from 'react-chartjs-2';\nimport axios from \"axios\";\nimport { Card, Row, Col, Grid } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../styles/forecast.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass HourlyForecast extends Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = e => {\n      this.setState({\n        chart: {\n          labels: ['12AM', '1AM', '2AM', '3AM', '4AM', '5AM', '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '1PM', '2PM', '3PM', '4PM', '5PM', '6PM', '7PM', '8PM', '9PM', '10PM', '11PM'],\n          datasets: [{\n            fill: false,\n            lineTension: 0.5,\n            backgroundColor: 'white',\n            borderColor: 'black',\n            label: \"Temperature\",\n            data: []\n          }]\n        }\n      }, () => {\n        e.preventDefault();\n        this.forecastAPI();\n        this.handleInputChange(this.state.cityName);\n      });\n    };\n\n    this.everyChange = e => {\n      this.setState({\n        cityName: e.target.value\n      });\n    };\n\n    this.state = {\n      chart: {\n        labels: ['12AM', '1AM', '2AM', '3AM', '4AM', '5AM', '6AM', '7AM', '8AM', '9AM', '10AM', '11AM', '12PM', '1PM', '2PM', '3PM', '4PM', '5PM', '6PM', '7PM', '8PM', '9PM', '10PM', '11PM'],\n        datasets: [{\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: 'white',\n          borderColor: 'black',\n          label: \"Temperature\",\n          data: []\n        }]\n      }\n    };\n  }\n\n  getTime(epoch) {\n    var myDate = new Date(epoch * 1000);\n\n    if (myDate.toLocaleString().split(',')[1].length == 11) {\n      return myDate.toLocaleString().split(',')[1].split(' ')[1].slice(0, 4) + myDate.toLocaleString().split(',')[1].split(' ')[2];\n    } else {\n      return myDate.toLocaleString().split(',')[1].split(' ')[1].slice(0, 5) + myDate.toLocaleString().split(',')[1].split(' ')[2];\n    }\n  }\n\n  handleInputChange(cityName) {\n    // this.props.changeCity(input)\n    window.localStorage.setItem('cityName', JSON.stringify(cityName));\n  }\n\n  async componentDidMount() {\n    if (this.props.cityInput !== null) {\n      await this.setState({\n        cityName: this.props.cityInput\n      });\n      this.forecastAPI();\n    }\n  }\n\n  getDayOfWeek(date) {\n    const dayOfWeek = new Date(date).getDay();\n    return isNaN(dayOfWeek) ? null : ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][dayOfWeek];\n  }\n\n  async forecastAPI() {\n    const options = {\n      method: 'GET',\n      url: 'http://localhost:3001/hourlyForecast',\n      //Backend Pull\n      params: {\n        city: this.state.cityName\n      }\n    };\n    let datas = await axios.request(options).then(function (response) {\n      return response.data;\n    }).catch(function (error) {\n      console.log(error);\n    }); //Cards\n\n    this.setState({\n      jsonData: datas.forecast.forecastday[0].hour.slice(0, 12)\n    });\n    this.setState({\n      jsonData2: datas.forecast.forecastday[0].hour.slice(12, 24)\n    }); //Graph\n\n    if (datas) {\n      datas.forecast.forecastday[0].hour.map(info => this.state.chart.datasets[0].data.push(info.temp_c));\n    }\n\n    console.log(this.state.chart.datasets[0].data);\n  } //Enter Key\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"search\",\n          onSubmit: this.handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: this.everyChange,\n            placeholder: \"Enter Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 4\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-example d-flex flex-row flex-nowrap overflow-auto\",\n            children: this.state.jsonData && this.state.jsonData.map(data => {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bottomHour\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                      className: \"weatherTime\",\n                      children: this.getTime(data.time_epoch)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 144,\n                      columnNumber: 8\n                    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                      src: data.condition.icon\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 146,\n                      columnNumber: 5\n                    }, this), data.temp_c, \"\\xB0C\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 5\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 5\n                }, this)\n              }, void 0, false);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-example d-flex flex-row flex-nowrap overflow-auto\",\n            children: this.state.jsonData2 && this.state.jsonData2.map(data2 => {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bottomHour\",\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                        className: \"weatherTime\",\n                        children: this.getTime(data2.time_epoch)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 167,\n                        columnNumber: 8\n                      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                        src: data2.condition.icon\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 171,\n                        columnNumber: 5\n                      }, this), data2.temp_c, \"\\xB0C\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 5\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 5\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 5\n                }, this)\n              }, void 0, false);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chartBox\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: \"relative\",\n                margin: \"auto\",\n                width: \"1250px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Hourly Temperature\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 3\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                className: \"lineChart\",\n                data: this.state.chart,\n                options: // {title:{ display:true, text:'Daily Temperature'}},\n                {\n                  scales: {\n                    y: {\n                      ticks: {\n                        color: \"white\",\n                        font: {\n                          size: 18\n                        },\n                        stepSize: 1,\n                        beginAtZero: true\n                      }\n                    },\n                    x: {\n                      ticks: {\n                        color: \"white\",\n                        font: {\n                          size: 15\n                        },\n                        stepSize: 1\n                      }\n                    }\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 3\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 3\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default HourlyForecast;","map":{"version":3,"sources":["D:/School/3230/weatherApplication/client/weather-app/src/components/HourlyForecast.jsx"],"names":["React","Component","Chart","ChartJS","Line","axios","Card","Row","Col","Grid","HourlyForecast","constructor","handleSubmit","e","setState","chart","labels","datasets","fill","lineTension","backgroundColor","borderColor","label","data","preventDefault","forecastAPI","handleInputChange","state","cityName","everyChange","target","value","getTime","epoch","myDate","Date","toLocaleString","split","length","slice","window","localStorage","setItem","JSON","stringify","componentDidMount","props","cityInput","getDayOfWeek","date","dayOfWeek","getDay","isNaN","options","method","url","params","city","datas","request","then","response","catch","error","console","log","jsonData","forecast","forecastday","hour","jsonData2","map","info","push","temp_c","render","time_epoch","condition","icon","data2","position","margin","width","scales","y","ticks","color","font","size","stepSize","beginAtZero","x"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAK,IAAIC,OAAlB,QAAiC,eAAjC;AACA,SAASD,KAAT,EAAgBE,IAAhB,QAAuC,iBAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,iBAArC;AACA,OAAO,sCAAP;AACA,OAAO,wBAAP;;;;AAEA,MAAMC,cAAN,SAA6BT,SAA7B,CAAuC;AACvCU,EAAAA,WAAW,GAAG;AACb;;AADa,SAuFdC,YAvFc,GAuFEC,CAAD,IAAO;AAErB,WAAKC,QAAL,CAAc;AAACC,QAAAA,KAAK,EAAE;AACrBC,UAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,KAArC,EAA4C,KAA5C,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,KAAjE,EAAwE,MAAxE,EAAgF,MAAhF,EACN,MADM,EACE,KADF,EACS,KADT,EACgB,KADhB,EACuB,KADvB,EAC8B,KAD9B,EACqC,KADrC,EAC4C,KAD5C,EACmD,KADnD,EAC0D,KAD1D,EACiE,MADjE,EACyE,MADzE,CADa;AAGrBC,UAAAA,QAAQ,EAAE,CACV;AACCC,YAAAA,IAAI,EAAE,KADP;AAECC,YAAAA,WAAW,EAAE,GAFd;AAGCC,YAAAA,eAAe,EAAE,OAHlB;AAIGC,YAAAA,WAAW,EAAE,OAJhB;AAKCC,YAAAA,KAAK,EAAE,aALR;AAMCC,YAAAA,IAAI,EAAE;AANP,WADU;AAHW;AAAR,OAAd,EAcG,MAAM;AACRV,QAAAA,CAAC,CAACW,cAAF;AACA,aAAKC,WAAL;AACA,aAAKC,iBAAL,CAAuB,KAAKC,KAAL,CAAWC,QAAlC;AACA,OAlBD;AAoBA,KA7Ga;;AAAA,SA+GdC,WA/Gc,GA+GChB,CAAD,IAAO;AACpB,WAAKC,QAAL,CAAc;AAAEc,QAAAA,QAAQ,EAAEf,CAAC,CAACiB,MAAF,CAASC;AAArB,OAAd;AACA,KAjHa;;AAEb,SAAKJ,KAAL,GAAa;AACZZ,MAAAA,KAAK,EAAE;AACNC,QAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,KAArC,EAA4C,KAA5C,EAAmD,KAAnD,EAA0D,KAA1D,EAAiE,KAAjE,EAAwE,MAAxE,EAAgF,MAAhF,EACN,MADM,EACE,KADF,EACS,KADT,EACgB,KADhB,EACuB,KADvB,EAC8B,KAD9B,EACqC,KADrC,EAC4C,KAD5C,EACmD,KADnD,EAC0D,KAD1D,EACiE,MADjE,EACyE,MADzE,CADF;AAGNC,QAAAA,QAAQ,EAAE,CACV;AACCC,UAAAA,IAAI,EAAE,KADP;AAECC,UAAAA,WAAW,EAAE,GAFd;AAGCC,UAAAA,eAAe,EAAE,OAHlB;AAIGC,UAAAA,WAAW,EAAE,OAJhB;AAKCC,UAAAA,KAAK,EAAE,aALR;AAMCC,UAAAA,IAAI,EAAE;AANP,SADU;AAHJ;AADK,KAAb;AAgBA;;AAEDS,EAAAA,OAAO,CAACC,KAAD,EAAO;AACb,QAAIC,MAAM,GAAG,IAAIC,IAAJ,CAASF,KAAK,GAAC,IAAf,CAAb;;AACA,QAAIC,MAAM,CAACE,cAAP,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,EAAsCC,MAAtC,IAAgD,EAApD,EAAuD;AACtD,aAAOJ,MAAM,CAACE,cAAP,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,EAAsCA,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,EAAoDE,KAApD,CAA0D,CAA1D,EAA6D,CAA7D,CAAD,GAAoEL,MAAM,CAACE,cAAP,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,EAAsCA,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAA1E;AACA,KAFD,MAGI;AACH,aAAOH,MAAM,CAACE,cAAP,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,EAAsCA,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,EAAoDE,KAApD,CAA0D,CAA1D,EAA6D,CAA7D,CAAD,GAAoEL,MAAM,CAACE,cAAP,GAAwBC,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,EAAsCA,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,CAA1E;AACA;AACD;;AAEDX,EAAAA,iBAAiB,CAACE,QAAD,EAAW;AACxB;AACHY,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,EAAwCC,IAAI,CAACC,SAAL,CAAehB,QAAf,CAAxC;AACA;;AAGsB,QAAjBiB,iBAAiB,GAAG;AACzB,QAAI,KAAKC,KAAL,CAAWC,SAAX,KAAyB,IAA7B,EAAmC;AAClC,YAAM,KAAKjC,QAAL,CAAc;AAAEc,QAAAA,QAAQ,EAAE,KAAKkB,KAAL,CAAWC;AAAvB,OAAd,CAAN;AACA,WAAKtB,WAAL;AACA;AAED;;AAEDuB,EAAAA,YAAY,CAACC,IAAD,EAAO;AACf,UAAMC,SAAS,GAAG,IAAIf,IAAJ,CAASc,IAAT,EAAeE,MAAf,EAAlB;AACA,WAAOC,KAAK,CAACF,SAAD,CAAL,GAAmB,IAAnB,GACL,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,QAA/C,EAAyD,UAAzD,EAAqE,QAArE,EAA+EA,SAA/E,CADF;AAEH;;AAEgB,QAAXzB,WAAW,GAAG;AACnB,UAAM4B,OAAO,GAAG;AACfC,MAAAA,MAAM,EAAE,KADO;AAEfC,MAAAA,GAAG,EAAE,sCAFU;AAE8B;AAC7CC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,IAAI,EAAE,KAAK9B,KAAL,CAAWC;AAAnB;AAHO,KAAhB;AAMA,QAAI8B,KAAK,GAAG,MAAMrD,KAAK,CAACsD,OAAN,CAAcN,OAAd,EACjBO,IADiB,CACZ,UAAUC,QAAV,EAAoB;AACzB,aAAOA,QAAQ,CAACtC,IAAhB;AACA,KAHiB,EAIjBuC,KAJiB,CAIX,UAAUC,KAAV,EAAiB;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,KANiB,CAAlB,CAPmB,CAiBnB;;AACA,SAAKjD,QAAL,CAAc;AAAEoD,MAAAA,QAAQ,EAAER,KAAK,CAACS,QAAN,CAAeC,WAAf,CAA2B,CAA3B,EAA8BC,IAA9B,CAAmC9B,KAAnC,CAAyC,CAAzC,EAA4C,EAA5C;AAAZ,KAAd;AACA,SAAKzB,QAAL,CAAc;AAAEwD,MAAAA,SAAS,EAAEZ,KAAK,CAACS,QAAN,CAAeC,WAAf,CAA2B,CAA3B,EAA8BC,IAA9B,CAAmC9B,KAAnC,CAAyC,EAAzC,EAA6C,EAA7C;AAAb,KAAd,EAnBmB,CAsBnB;;AAEA,QAAImB,KAAJ,EAAW;AACVA,MAAAA,KAAK,CAACS,QAAN,CAAeC,WAAf,CAA2B,CAA3B,EAA8BC,IAA9B,CAAmCE,GAAnC,CAAuCC,IAAI,IAC1C,KAAK7C,KAAL,CAAWZ,KAAX,CAAiBE,QAAjB,CAA0B,CAA1B,EAA6BM,IAA7B,CAAkCkD,IAAlC,CAAuCD,IAAI,CAACE,MAA5C,CADD;AAGA;;AAEDV,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtC,KAAL,CAAWZ,KAAX,CAAiBE,QAAjB,CAA0B,CAA1B,EAA6BM,IAAzC;AAGA,GApFsC,CAuFvC;;;AA8BAoD,EAAAA,MAAM,GAAG;AACR,wBACC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACA;AAAA,gCACA;AAAM,UAAA,SAAS,EAAC,QAAhB;AAAyB,UAAA,QAAQ,EAAE,KAAK/D,YAAxC;AAAA,iCACC;AAAO,YAAA,QAAQ,EAAE,KAAKiB,WAAtB;AAAmC,YAAA,WAAW,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBADA,eAKA;AAAA,kCACA;AAAA;AAAA;AAAA;AAAA,kBADA,eACS;AAAA;AAAA;AAAA;AAAA,kBADT,eAGA,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,wDAAf;AAAA,sBACC,KAAKF,KAAL,CAAWuC,QAAX,IAAuB,KAAKvC,KAAL,CAAWuC,QAAX,CAAoBK,GAApB,CAAwBhD,IAAI,IAAG;AACtD,kCACC;AAAA,uCAEA;AAAK,kBAAA,SAAS,EAAC,YAAf;AAAA,yCACA;AAAA,4CAAG;AAAG,sBAAA,SAAS,EAAC,aAAb;AAAA,gCAA4B,KAAKS,OAAL,CAAaT,IAAI,CAACqD,UAAlB;AAA5B;AAAA;AAAA;AAAA;AAAA,4BAAH,eAEA;AAAK,sBAAA,GAAG,EAAErD,IAAI,CAACsD,SAAL,CAAeC;AAAzB;AAAA;AAAA;AAAA;AAAA,4BAFA,EAGCvD,IAAI,CAACmD,MAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAFA,+BADD;AAiBA,aAlBuB;AADxB;AAAA;AAAA;AAAA;AAAA,kBAHA,eAyBA,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,wDAAf;AAAA,sBACC,KAAK/C,KAAL,CAAW2C,SAAX,IAAwB,KAAK3C,KAAL,CAAW2C,SAAX,CAAqBC,GAArB,CAAyBQ,KAAK,IAAG;AACzD,kCACC;AAAA,uCACA,QAAC,GAAD;AAAA,yCACA;AAAK,oBAAA,SAAS,EAAC,YAAf;AAAA,2CAEA;AAAA,8CAAG;AAAG,wBAAA,SAAS,EAAC,aAAb;AAAA,kCAA4B,KAAK/C,OAAL,CAAa+C,KAAK,CAACH,UAAnB;AAA5B;AAAA;AAAA;AAAA;AAAA,8BAAH,eAIA;AAAK,wBAAA,GAAG,EAAEG,KAAK,CAACF,SAAN,CAAgBC;AAA1B;AAAA;AAAA;AAAA;AAAA,8BAJA,EAKCC,KAAK,CAACL,MALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA,+BADD;AAkBA,aAnBwB;AADzB;AAAA;AAAA;AAAA;AAAA,kBAzBA,eA+CA;AAAA;AAAA;AAAA;AAAA,kBA/CA,eA+CS;AAAA;AAAA;AAAA;AAAA,kBA/CT,eAiDA;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,mCACA;AAAK,cAAA,KAAK,EAAE;AAAEM,gBAAAA,QAAQ,EAAE,UAAZ;AAAwBC,gBAAAA,MAAM,EAAE,MAAhC;AAAwCC,gBAAAA,KAAK,EAAE;AAA/C,eAAZ;AAAA,sCAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFA,eAGA,QAAC,IAAD;AAAM,gBAAA,SAAS,EAAC,WAAhB;AAA4B,gBAAA,IAAI,EAAE,KAAKvD,KAAL,CAAWZ,KAA7C;AACC,gBAAA,OAAO,EACP;AACA;AAACoE,kBAAAA,MAAM,EAAE;AACRC,oBAAAA,CAAC,EAAE;AACDC,sBAAAA,KAAK,EAAE;AACRC,wBAAAA,KAAK,EAAE,OADC;AAERC,wBAAAA,IAAI,EAAE;AACJC,0BAAAA,IAAI,EAAE;AADF,yBAFE;AAKRC,wBAAAA,QAAQ,EAAE,CALF;AAMRC,wBAAAA,WAAW,EAAE;AANL;AADN,qBADK;AAWRC,oBAAAA,CAAC,EAAE;AACFN,sBAAAA,KAAK,EAAE;AACLC,wBAAAA,KAAK,EAAE,OADF;AAELC,wBAAAA,IAAI,EAAE;AACPC,0BAAAA,IAAI,EAAE;AADC,yBAFD;AAKLC,wBAAAA,QAAQ,EAAE;AALL;AADL;AAXK;AAAT;AAHD;AAAA;AAAA;AAAA;AAAA,sBAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAjDA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADD;AA8FA;;AApNsC;;AAwNvC,eAAe/E,cAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Chart as ChartJS } from 'chart.js/auto'\nimport { Chart, Line }            from 'react-chartjs-2'\nimport axios from \"axios\";\n\nimport { Card, Row, Col, Grid } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"../styles/forecast.css\"\n\nclass HourlyForecast extends Component {\nconstructor() {\n\tsuper();\n\tthis.state = {\n\t\tchart: {\n\t\t\tlabels: ['12AM', '1AM', '2AM', '3AM', '4AM', '5AM', '6AM', '7AM', '8AM', '9AM', '10AM', '11AM'\n\t\t\t, '12PM', '1PM', '2PM', '3PM', '4PM', '5PM', '6PM', '7PM', '8PM', '9PM', '10PM', '11PM'],\n\t\t\tdatasets: [\n\t\t\t{\n\t\t\t\tfill: false,\n\t\t\t\tlineTension: 0.5,\n\t\t\t\tbackgroundColor: 'white',\n\t\t\t\t  borderColor: 'black',\n\t\t\t\tlabel: \"Temperature\",\n\t\t\t\tdata: [],\n\t\t\t}]\n\t\t},\n\t};\n\n}\n\ngetTime(epoch){\n\tvar myDate = new Date(epoch*1000);\n\tif (myDate.toLocaleString().split(',')[1].length == 11){\n\t\treturn(myDate.toLocaleString().split(',')[1].split(' ')[1].slice(0, 4)) + myDate.toLocaleString().split(',')[1].split(' ')[2];\t\n\t}\n\telse{\n\t\treturn(myDate.toLocaleString().split(',')[1].split(' ')[1].slice(0, 5)) + myDate.toLocaleString().split(',')[1].split(' ')[2];\t\n\t}\n}\n\nhandleInputChange(cityName) {\n    // this.props.changeCity(input)\n\twindow.localStorage.setItem('cityName', JSON.stringify(cityName))\n}\n\n\nasync componentDidMount() {\n\tif (this.props.cityInput !== null) {\n\t\tawait this.setState({ cityName: this.props.cityInput });\n\t\tthis.forecastAPI();\n\t}\n\n}\n\ngetDayOfWeek(date) {\n    const dayOfWeek = new Date(date).getDay();\n    return isNaN(dayOfWeek) ? null : \n      ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][dayOfWeek];\n}\n\nasync forecastAPI() {\n\tconst options = {\n\t\tmethod: 'GET',\n\t\turl: 'http://localhost:3001/hourlyForecast', //Backend Pull\n\t\tparams: { city: this.state.cityName },\n\t}\n\n\tlet datas = await axios.request(options)\n\t.then(function (response) {\n\t\treturn response.data;\n\t})\n\t.catch(function (error) {\n\t\tconsole.log(error);\n\t});\n\n\n\n\t//Cards\n\tthis.setState({ jsonData: datas.forecast.forecastday[0].hour.slice(0, 12) })\n\tthis.setState({ jsonData2: datas.forecast.forecastday[0].hour.slice(12, 24) })\n\n\n\t//Graph\n\n\tif (datas) {\n\t\tdatas.forecast.forecastday[0].hour.map(info => \n\t\t\tthis.state.chart.datasets[0].data.push(info.temp_c)\t\t\t\t\n\t\t);\n\t}\n\n\tconsole.log(this.state.chart.datasets[0].data);\n\n\n}\n\n\n//Enter Key\nhandleSubmit = (e) => {\n\n\tthis.setState({chart: {\n\t\tlabels: ['12AM', '1AM', '2AM', '3AM', '4AM', '5AM', '6AM', '7AM', '8AM', '9AM', '10AM', '11AM'\n\t\t, '12PM', '1PM', '2PM', '3PM', '4PM', '5PM', '6PM', '7PM', '8PM', '9PM', '10PM', '11PM'],\n\t\tdatasets: [\n\t\t{\n\t\t\tfill: false,\n\t\t\tlineTension: 0.5,\n\t\t\tbackgroundColor: 'white',\n\t\t\t  borderColor: 'black',\n\t\t\tlabel: \"Temperature\",\n\t\t\tdata: [],\n\t\t}]\n\t},\n\t\n\t}, () => {\n\t\te.preventDefault();\n\t\tthis.forecastAPI();\n\t\tthis.handleInputChange(this.state.cityName);\n\t})\n\t\n}\n\neveryChange = (e) => {\n\tthis.setState({ cityName: e.target.value });\n}\n\n\nrender() {\n\treturn (\n\t\t<div className='app'>\n\t\t<>\n\t\t<form className='search' onSubmit={this.handleSubmit}>\n\t\t\t<input onChange={this.everyChange} placeholder=\"Enter Location\"></input>\n\t\t</form>\n\n\t\t<div>\n\t\t<br></br><br></br>\n\t\t\n\t\t<Row className=\"card-example d-flex flex-row flex-nowrap overflow-auto\">\n\t\t{this.state.jsonData && this.state.jsonData.map(data=> {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\n\t\t\t\t<div className='bottomHour'>\n\t\t\t\t<p><b className=\"weatherTime\">{this.getTime(data.time_epoch)}</b>\n\t\t\t\n\t\t\t\t<img src={data.condition.icon}></img>\n\t\t\t\t{data.temp_c}°C</p>\n\t\t\t\n\t\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t</>\n\t\t\t\t\n\t\t\t);\n\t\t})}\n\t\t</Row>\n\t\t\n\t\t<Row className=\"card-example d-flex flex-row flex-nowrap overflow-auto\">\n\t\t{this.state.jsonData2 && this.state.jsonData2.map(data2=> {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t<Col>\n\t\t\t\t<div className='bottomHour'>\n\t\t\t\n\t\t\t\t<p><b className=\"weatherTime\">{this.getTime(data2.time_epoch)}</b>\n\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t<img src={data2.condition.icon}></img>\n\t\t\t\t{data2.temp_c}°C</p>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t</Col>\n\t\t\t\t\n\t\t\t\t</>\n\t\t\t\t\n\t\t\t);\n\t\t})}\n\t\t</Row>\n\t\t<br></br><br></br>\n\n\t\t<div className='chartBox'>\n\t\t<div style={{ position: \"relative\", margin: \"auto\", width: \"1250px\" }}>\n\n\t\t<h2>Hourly Temperature</h2>\n\t\t<Line className=\"lineChart\" data={this.state.chart} \n\t\t\toptions={\n\t\t\t// {title:{ display:true, text:'Daily Temperature'}},\n\t\t\t{scales: {\n\t\t\t\ty: {  \n\t\t\t\t  ticks: {\n\t\t\t\t\tcolor: \"white\", \n\t\t\t\t\tfont: {\n\t\t\t\t\t  size: 18, \n\t\t\t\t\t},\n\t\t\t\t\tstepSize: 1,\n\t\t\t\t\tbeginAtZero: true\n\t\t\t\t  }\n\t\t\t\t},\n\t\t\t\tx: {  \n\t\t\t\t\tticks: {\n\t\t\t\t\t  color: \"white\", \n\t\t\t\t\t  font: {\n\t\t\t\t\t\tsize: 15, \n\t\t\t\t\t  },\n\t\t\t\t\t  stepSize: 1,\n\t\t\t\t\t}\n\t\t\t\t  }\n\t\t\t}\n\t\t\t}}\n\t\t\t />\n\t\t</div>\n\t\t</div>\n\n\t\t</div>\n\t\t\n\n\t</></div>\n\t);\n}\n}\n\n\nexport default HourlyForecast;"]},"metadata":{},"sourceType":"module"}