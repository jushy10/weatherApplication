{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\src\\\\components\\\\ThreeDayForecast.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Card, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../styles/3dayforecast.css\";\n\nvar ThreeDayForecast = /*#__PURE__*/function (_Component) {\n  _inherits(ThreeDayForecast, _Component);\n\n  function ThreeDayForecast() {\n    var _this;\n\n    _classCallCheck(this, ThreeDayForecast);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ThreeDayForecast).call(this));\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.forecastAPI();\n\n      _this.handleInputChange(_this.state.cityName);\n\n      _this.setState({\n        isSubmitted: true\n      });\n    };\n\n    _this.everyChange = function (e) {\n      _this.setState({\n        cityName: e.target.value\n      });\n\n      _this.setState({\n        isSubmitted: false\n      });\n    };\n\n    _this.state = {\n      isSubmitted: false\n    };\n    return _this;\n  }\n\n  _createClass(ThreeDayForecast, [{\n    key: \"handleInputChange\",\n    value: function handleInputChange(cityName) {\n      window.localStorage.setItem('cityName', JSON.stringify(cityName));\n    }\n  }, {\n    key: \"getDayOfWeek\",\n    value: function getDayOfWeek(date) {\n      var dayOfWeek = new Date(date).getDay();\n      return isNaN(dayOfWeek) ? null : ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][dayOfWeek];\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.props.cityInput !== null)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.setState({\n                  cityName: this.props.cityInput\n                });\n\n              case 3:\n                this.forecastAPI();\n\n              case 4:\n                this.setState({\n                  isSubmitted: true\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"forecastAPI\",\n    value: function () {\n      var _forecastAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var options, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = {\n                  method: 'GET',\n                  url: 'http://localhost:3001/forecastAPI',\n                  //Backend Pull\n                  params: {\n                    city: this.state.cityName\n                  }\n                };\n                _context2.next = 3;\n                return axios.request(options).then(function (response) {\n                  return response.data;\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 3:\n                data = _context2.sent;\n                this.setState({\n                  jsonData: data.forecast.forecastday\n                });\n                this.setState({\n                  cities: data.location.name\n                });\n                this.setState({\n                  country: data.location.country\n                });\n                this.setState({\n                  region: data.location.region\n                });\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function forecastAPI() {\n        return _forecastAPI.apply(this, arguments);\n      }\n\n      return forecastAPI;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"threedayforecast\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n        className: \"search\",\n        onSubmit: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        onChange: this.everyChange,\n        placeholder: \"Enter Location\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 4\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 3\n        }\n      }, this.state.isSubmitted && /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }\n      }, \" \", this.state.cities, \" \", this.state.region, \", \", this.state.country)), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 3\n        }\n      }), /*#__PURE__*/React.createElement(Row, {\n        className: \"card-example d-flex flex-row flex-nowrap overflow-auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 3\n        }\n      }, this.state.jsonData && this.state.jsonData.map(function (data) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, \"\\u2003\\u2003\", /*#__PURE__*/React.createElement(Col, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"container_threedayforecast\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"bottom\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(Card, {\n          border: \"transparent\",\n          class: \"weatherCard\",\n          bg: \"transparent\",\n          text: \"light\",\n          style: {\n            width: '25rem',\n            display: 'flex',\n            flexDirection: 'column',\n            border: 'none'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(Card.Img, {\n          class: \"weatherIcon\",\n          variant: \"top\",\n          src: data.day.condition.icon,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 6\n          }\n        }), /*#__PURE__*/React.createElement(Card.Body, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(Card.Title, {\n          class: \"cardTitle\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 7\n          }\n        }, _this2.getDayOfWeek(data.date)), /*#__PURE__*/React.createElement(Card.Text, {\n          class: \"cardText\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 7\n          }\n        }, \"Condition: \", data.day.condition.text), /*#__PURE__*/React.createElement(Card.Text, {\n          class: \"cardText\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 7\n          }\n        }, \" Average Temp: \", data.day.avgtemp_c, \"\\xB0C\", /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 7\n          }\n        }), \"Max Temp: \", data.day.maxtemp_c, \"\\xB0C\", /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 7\n          }\n        }), \"Min Temp: \", data.day.mintemp_c, \"\\xB0C\", /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 7\n          }\n        }), \"Chance of Rain: \", data.day.daily_chance_of_rain, \"%\")))))));\n      })))));\n    }\n  }]);\n\n  return ThreeDayForecast;\n}(Component);\n\nexport default ThreeDayForecast;","map":{"version":3,"sources":["C:/Web Development/WeatherApplication/client/weather-app/src/components/ThreeDayForecast.jsx"],"names":["React","Component","axios","Card","Row","Col","ThreeDayForecast","handleSubmit","e","preventDefault","forecastAPI","handleInputChange","state","cityName","setState","isSubmitted","everyChange","target","value","window","localStorage","setItem","JSON","stringify","date","dayOfWeek","Date","getDay","isNaN","props","cityInput","options","method","url","params","city","request","then","response","data","catch","error","console","log","jsonData","forecast","forecastday","cities","location","name","country","region","map","width","display","flexDirection","border","day","condition","icon","getDayOfWeek","text","avgtemp_c","maxtemp_c","mintemp_c","daily_chance_of_rain"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { Card, Row, Col } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport \"../styles/3dayforecast.css\"\r\n\r\nclass ThreeDayForecast extends Component {\r\nconstructor() {\r\n\tsuper();\r\n\tthis.state = {\r\n\t\tisSubmitted: false,\r\n\t};\r\n}\r\n\r\nhandleInputChange(cityName) {\r\n\t\r\n\twindow.localStorage.setItem('cityName', JSON.stringify(cityName))\r\n}\r\n\r\n\r\n\r\ngetDayOfWeek(date) {\r\n    const dayOfWeek = new Date(date).getDay();\r\n    return isNaN(dayOfWeek) ? null : \r\n      ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][dayOfWeek];\r\n}\r\n\r\nasync componentDidMount() {\r\n\tif (this.props.cityInput !== null) {\r\n\t\tawait this.setState({ cityName: this.props.cityInput });\r\n\t\tthis.forecastAPI();\r\n\t}\r\n\tthis.setState({isSubmitted: true})\r\n\r\n}\r\n\r\nasync forecastAPI() {\r\n\tconst options = {\r\n\t\tmethod: 'GET',\r\n\t\turl: 'http://localhost:3001/forecastAPI', //Backend Pull\r\n\t\tparams: { city: this.state.cityName },\r\n\t}\r\n\r\n\tlet data = await axios.request(options)\r\n\t.then(function (response) {\r\n\t\treturn response.data;\r\n\t})\r\n\t.catch(function (error) {\r\n\t\tconsole.log(error);\r\n\t});\r\n\tthis.setState({ jsonData: data.forecast.forecastday });\r\n\tthis.setState({ cities: data.location.name})\r\n\tthis.setState({ country: data.location.country})\r\n\tthis.setState({ region: data.location.region})\r\n}\r\n\r\nhandleSubmit = (e) => {\r\n\r\n\te.preventDefault();\r\n\tthis.forecastAPI();\r\n\tthis.handleInputChange(this.state.cityName);\r\n\tthis.setState({isSubmitted: true})\r\n\r\n}\r\n\r\neveryChange = (e) => {\r\n\r\n\tthis.setState({ cityName: e.target.value });\r\n\tthis.setState({isSubmitted: false})\r\n}\r\n\r\n\r\nrender() {\r\n\treturn (\r\n\t\t<div className='threedayforecast'>\r\n\t\t<>\r\n\t\t<form className=\"search\" onSubmit={this.handleSubmit}>\r\n\t\t\t<input onChange={this.everyChange} placeholder=\"Enter Location\"></input>\r\n\t\t</form> \r\n\r\n\t\t<div>\r\n\r\n\t\t{this.state.isSubmitted &&\r\n\t\t<h2><center> {this.state.cities} {this.state.region}, {this.state.country}</center></h2>\r\n\t\t}\r\n\t\t<br></br>\r\n\t\t<Row className=\"card-example d-flex flex-row flex-nowrap overflow-auto\">\r\n\t\t{this.state.jsonData && this.state.jsonData.map(data => {\r\n\t\t\t\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t&emsp;&emsp;\r\n\t\t\t\t<Col>\r\n\t\t\t\t<div className='container_threedayforecast'>\r\n\t\t\t\t<div className='bottom'>\r\n\t\t\t\t<Card border=\"transparent\" class=\"weatherCard\" bg='transparent' text='light' style={{width: '25rem', display: 'flex', flexDirection: 'column', border: 'none'}}>\r\n\t\t\t\t\t<Card.Img class=\"weatherIcon\" variant=\"top\" src={data.day.condition.icon} />\r\n\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t<Card.Title class=\"cardTitle\">{this.getDayOfWeek(data.date)}</Card.Title>\r\n\t\t\t\t\t\t<Card.Text class=\"cardText\">Condition: {data.day.condition.text}</Card.Text>\r\n\t\t\t\t\t\t<Card.Text class=\"cardText\"> Average Temp: {data.day.avgtemp_c}°C \r\n\t\t\t\t\t\t<br></br>Max Temp: {data.day.maxtemp_c}°C\r\n\t\t\t\t\t\t<br></br>Min Temp: {data.day.mintemp_c}°C\r\n\t\t\t\t\t\t<br></br>Chance of Rain: {data.day.daily_chance_of_rain}%\r\n\r\n\r\n\t\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t</Card.Body>\r\n\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t</Col>\r\n\t\t\t\t</>\r\n\r\n\t\t\t);\r\n\t\t\t\r\n\t\t})}\r\n\t\t</Row>\r\n\t\t</div>\r\n\r\n\t</>\r\n\t</div>\r\n\t)\r\n};\r\n}\r\n\r\n\r\nexport default ThreeDayForecast;"]},"metadata":{},"sourceType":"module"}