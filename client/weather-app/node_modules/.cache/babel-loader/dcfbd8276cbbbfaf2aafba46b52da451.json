{"ast":null,"code":"var _jsxFileName = \"D:\\\\School\\\\3230\\\\weatherApplication\\\\client\\\\weather-app\\\\src\\\\components\\\\ThreeDayForecast.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Card, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../styles/forecast.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ThreeDayForecast extends Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.forecastAPI();\n    };\n\n    this.everyChange = e => {\n      this.setState({\n        cityName: e.target.value\n      });\n    };\n\n    this.state = {};\n  }\n\n  getDayOfWeek(date) {\n    const dayOfWeek = new Date(date).getDay();\n    return isNaN(dayOfWeek) ? null : ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][dayOfWeek];\n  }\n\n  async forecastAPI() {\n    const options = {\n      method: 'GET',\n      url: 'http://localhost:3001/forecastAPI',\n      //Backend Pull\n      params: {\n        city: this.state.cityName\n      }\n    };\n    let data = await axios.request(options).then(function (response) {\n      return response.data;\n    }).catch(function (error) {\n      console.log(error);\n    });\n    this.setState({\n      jsonData: data.forecast.forecastday\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: this.everyChange,\n          placeholder: \"Enter Location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"card-example d-flex flex-row flex-nowrap overflow-auto\",\n          children: this.state.jsonData && this.state.jsonData.map(data => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"\\u2003\\u2003\", /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(Card, {\n                  border: \"success\",\n                  class: \"weatherCard\",\n                  bg: \"dark\",\n                  text: \"light\",\n                  style: {\n                    width: '25rem',\n                    display: 'flex',\n                    flexDirection: 'column'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n                    class: \"weatherIcon\",\n                    variant: \"top\",\n                    src: data.day.condition.icon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 69,\n                    columnNumber: 6\n                  }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                    children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                      class: \"cardTitle\",\n                      children: this.getDayOfWeek(data.date)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 71,\n                      columnNumber: 7\n                    }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                      class: \"cardText\",\n                      children: [\"Average Temp: \", data.day.avgtemp_c]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 72,\n                      columnNumber: 7\n                    }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                      class: \"cardText\",\n                      children: [\"Chance of Rain: \", data.day.daily_chance_of_rain, \"% \"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 73,\n                      columnNumber: 7\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 6\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 5\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 5\n              }, this)]\n            }, void 0, true);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default ThreeDayForecast;","map":{"version":3,"sources":["D:/School/3230/weatherApplication/client/weather-app/src/components/ThreeDayForecast.jsx"],"names":["React","Component","axios","Card","Row","Col","ThreeDayForecast","constructor","handleSubmit","e","preventDefault","forecastAPI","everyChange","setState","cityName","target","value","state","getDayOfWeek","date","dayOfWeek","Date","getDay","isNaN","options","method","url","params","city","data","request","then","response","catch","error","console","log","jsonData","forecast","forecastday","render","map","width","display","flexDirection","day","condition","icon","avgtemp_c","daily_chance_of_rain"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport { Card, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport \"../styles/forecast.css\"\n\nclass ThreeDayForecast extends Component {\nconstructor() {\n\tsuper();\n\tthis.state = {\n\t};\n}\n\ngetDayOfWeek(date) {\n    const dayOfWeek = new Date(date).getDay();\n    return isNaN(dayOfWeek) ? null : \n      ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][dayOfWeek];\n}\n\nasync forecastAPI() {\n\tconst options = {\n\t\tmethod: 'GET',\n\t\turl: 'http://localhost:3001/forecastAPI', //Backend Pull\n\t\tparams: { city: this.state.cityName },\n\t}\n\n\tlet data = await axios.request(options)\n\t.then(function (response) {\n\t\treturn response.data;\n\t})\n\t.catch(function (error) {\n\t\tconsole.log(error);\n\t});\n\tthis.setState({ jsonData: data.forecast.forecastday });\n}\n\nhandleSubmit = (e) => {\n\n\te.preventDefault();\n\tthis.forecastAPI();\n\n}\n\neveryChange = (e) => {\n\n\tthis.setState({ cityName: e.target.value });\n}\n\n\nrender() {\n\treturn (\n\t\t<>\n\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t<input onChange={this.everyChange} placeholder=\"Enter Location\"></input>\n\t\t</form>\n\n\t\t<div>\n\t\t<br></br><br></br><br></br>\t\n\t\t<Row className=\"card-example d-flex flex-row flex-nowrap overflow-auto\">\n\t\t{this.state.jsonData && this.state.jsonData.map(data => {\n\t\t\t\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t&emsp;&emsp;\n\t\t\t\t<Col>\n\t\t\t\t\n\t\t\t\t<Card border=\"success\" class=\"weatherCard\" bg='dark' text='light' style={{ width: '25rem', display: 'flex', flexDirection: 'column'}}>\n\t\t\t\t\t<Card.Img class=\"weatherIcon\" variant=\"top\" src={data.day.condition.icon} />\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<Card.Title class=\"cardTitle\">{this.getDayOfWeek(data.date)}</Card.Title>\n\t\t\t\t\t\t<Card.Text class=\"cardText\">Average Temp: {data.day.avgtemp_c}</Card.Text>\n\t\t\t\t\t\t<Card.Text class=\"cardText\">Chance of Rain: {data.day.daily_chance_of_rain}% </Card.Text>\n\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t\t</>\n\n\t\t\t);\n\t\t\t\n\t\t})}\n\t\t</Row>\n\t\t</div>\n\n\t</>\n\t);\n}\n}\n\nexport default ThreeDayForecast;"]},"metadata":{},"sourceType":"module"}