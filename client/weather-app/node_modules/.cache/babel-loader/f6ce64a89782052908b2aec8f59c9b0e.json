{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web Development\\\\WeatherApplication\\\\client\\\\weather-app\\\\src\\\\components\\\\HourlyForecast.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Card, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"../styles/forecast.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass HourlyForecast extends Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.forecastAPI();\n      this.handleInputChange(this.state.cityName);\n    };\n\n    this.everyChange = e => {\n      this.setState({\n        cityName: e.target.value\n      });\n    };\n\n    this.state = {};\n  }\n\n  handleInputChange(input) {\n    this.props.changeCity(input);\n  }\n\n  componentDidMount() {\n    if (this.props.cityInput !== null) {\n      // console.log(this.props.cityInput)\n      this.setState({\n        cityName: this.props.cityInput\n      });\n      this.forecastAPI();\n    }\n  }\n\n  getDayOfWeek(date) {\n    const dayOfWeek = new Date(date).getDay();\n    return isNaN(dayOfWeek) ? null : ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][dayOfWeek];\n  }\n\n  async forecastAPI() {\n    const options = {\n      method: 'GET',\n      url: 'http://localhost:3001/hourlyForecast',\n      //Backend Pull\n      params: {\n        city: this.state.cityName\n      }\n    };\n    let data = await axios.request(options).then(function (response) {\n      return response.data;\n    }).catch(function (error) {\n      console.log(error);\n    });\n    this.setState({\n      jsonData: data.forecast.forecastday[0].hour\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"search\",\n          onSubmit: this.handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: this.everyChange,\n            placeholder: \"Enter Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 4\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"card-example d-flex flex-row flex-nowrap overflow-auto\",\n            children: this.state.jsonData && this.state.jsonData.map(data => {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [\"\\u2003\\u2003\", /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"container\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"bottom\",\n                      children: /*#__PURE__*/_jsxDEV(Card, {\n                        border: \"success\",\n                        class: \"weatherCard\",\n                        bg: \"transparent\",\n                        text: \"light\",\n                        style: {\n                          border: 'none',\n                          width: '10rem',\n                          display: 'flex',\n                          flexDirection: 'column'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                          children: /*#__PURE__*/_jsxDEV(Card.Text, {\n                            class: \"cardText\",\n                            children: [\"Time: \", data.time, \" \"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 88,\n                            columnNumber: 7\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 87,\n                          columnNumber: 6\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 85,\n                        columnNumber: 5\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 84,\n                      columnNumber: 5\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 5\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 5\n                }, this)]\n              }, void 0, true);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }, this);\n  }\n\n}\n\nexport default HourlyForecast;","map":{"version":3,"sources":["C:/Web Development/WeatherApplication/client/weather-app/src/components/HourlyForecast.jsx"],"names":["React","Component","axios","Card","Row","Col","HourlyForecast","constructor","handleSubmit","e","preventDefault","forecastAPI","handleInputChange","state","cityName","everyChange","setState","target","value","input","props","changeCity","componentDidMount","cityInput","getDayOfWeek","date","dayOfWeek","Date","getDay","isNaN","options","method","url","params","city","data","request","then","response","catch","error","console","log","jsonData","forecast","forecastday","hour","render","map","border","width","display","flexDirection","time"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { Card, Row, Col } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport \"../styles/forecast.css\"\r\n\r\nclass HourlyForecast extends Component {\r\nconstructor() {\r\n\tsuper();\r\n\tthis.state = {\r\n\t};\r\n}\r\n\r\nhandleInputChange(input) {\r\n    this.props.changeCity(input)\r\n}\r\n\r\n\r\ncomponentDidMount() {\r\n\tif (this.props.cityInput !== null) {\r\n\t\t// console.log(this.props.cityInput)\r\n\t\tthis.setState({ cityName: this.props.cityInput });\r\n\t\tthis.forecastAPI();\r\n\t}\r\n\r\n}\r\n\r\ngetDayOfWeek(date) {\r\n    const dayOfWeek = new Date(date).getDay();\r\n    return isNaN(dayOfWeek) ? null : \r\n      ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][dayOfWeek];\r\n}\r\n\r\nasync forecastAPI() {\r\n\tconst options = {\r\n\t\tmethod: 'GET',\r\n\t\turl: 'http://localhost:3001/hourlyForecast', //Backend Pull\r\n\t\tparams: { city: this.state.cityName },\r\n\t}\r\n\r\n\tlet data = await axios.request(options)\r\n\t.then(function (response) {\r\n\t\treturn response.data;\r\n\t})\r\n\t.catch(function (error) {\r\n\t\tconsole.log(error);\r\n\t});\r\n\tthis.setState({ jsonData: data.forecast.forecastday[0].hour });\r\n}\r\n\r\nhandleSubmit = (e) => {\r\n\r\n\te.preventDefault();\r\n\tthis.forecastAPI();\r\n\tthis.handleInputChange(this.state.cityName);\r\n\r\n}\r\n\r\neveryChange = (e) => {\r\n\r\n\tthis.setState({ cityName: e.target.value });\r\n}\r\n\r\n\r\nrender() {\r\n\treturn (\r\n\t\t<div className='app'>\r\n\t\t<>\r\n\t\t<form className='search' onSubmit={this.handleSubmit}>\r\n\t\t\t<input onChange={this.everyChange} placeholder=\"Enter Location\"></input>\r\n\t\t</form>\r\n\r\n\t\t<div>\r\n\t\t<br></br><br></br><br></br>\t\r\n\t\t<Row className=\"card-example d-flex flex-row flex-nowrap overflow-auto\">\r\n\t\t{this.state.jsonData && this.state.jsonData.map(data => {\r\n\t\t\t\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t&emsp;&emsp;\r\n\t\t\t\t<Col>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t<div className='bottom'>\r\n\t\t\t\t<Card border=\"success\" class=\"weatherCard\" bg='transparent' text='light' style={{border: 'none', width: '10rem', display: 'flex', flexDirection: 'column'}}>\r\n\t\t\t\t\t{/* <Card.Img class=\"weatherIcon\" variant=\"top\" src={data.day.condition.icon} /> */}\r\n\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t<Card.Text class=\"cardText\">Time: {data.time} </Card.Text>\r\n\r\n\t\t\t\t\t</Card.Body>\r\n\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t</Col>\r\n\t\t\t\t</>\r\n\r\n\t\t\t);\r\n\t\t\t\r\n\t\t})}\r\n\t\t</Row>\r\n\t\t</div>\r\n\r\n\t</></div>\r\n\t);\r\n}\r\n}\r\n\r\nexport default HourlyForecast;"]},"metadata":{},"sourceType":"module"}